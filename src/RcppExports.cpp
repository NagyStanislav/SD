// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cl
double cl(NumericVector x);
RcppExport SEXP _SD_cl(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cl(x));
    return rcpp_result_gen;
END_RCPP
}
// csample
NumericVector csample(int m, int size, bool replace, NumericVector prob);
RcppExport SEXP _SD_csample(SEXP mSEXP, SEXP sizeSEXP, SEXP replaceSEXP, SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type replace(replaceSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prob(probSEXP);
    rcpp_result_gen = Rcpp::wrap(csample(m, size, replace, prob));
    return rcpp_result_gen;
END_RCPP
}
// fsample
NumericVector fsample(NumericVector v, int size, bool replace, NumericVector prob);
RcppExport SEXP _SD_fsample(SEXP vSEXP, SEXP sizeSEXP, SEXP replaceSEXP, SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type replace(replaceSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prob(probSEXP);
    rcpp_result_gen = Rcpp::wrap(fsample(v, size, replace, prob));
    return rcpp_result_gen;
END_RCPP
}
// mSD
arma::mat mSD(NumericVector Y, int n, int mu, int ml, int S);
RcppExport SEXP _SD_mSD(SEXP YSEXP, SEXP nSEXP, SEXP muSEXP, SEXP mlSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type mu(muSEXP);
    Rcpp::traits::input_parameter< int >::type ml(mlSEXP);
    Rcpp::traits::input_parameter< int >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(mSD(Y, n, mu, ml, S));
    return rcpp_result_gen;
END_RCPP
}
// Amat
arma::mat Amat(double rho);
RcppExport SEXP _SD_Amat(SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(Amat(rho));
    return rcpp_result_gen;
END_RCPP
}
// gen
arma::mat gen(int n, double rho);
RcppExport SEXP _SD_gen(SEXP nSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(gen(n, rho));
    return rcpp_result_gen;
END_RCPP
}
// cmb
double cmb(int n);
RcppExport SEXP _SD_cmb(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cmb(n));
    return rcpp_result_gen;
END_RCPP
}
// stl_nth_element
NumericVector stl_nth_element(NumericVector x, int n);
RcppExport SEXP _SD_stl_nth_element(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(stl_nth_element(x, n));
    return rcpp_result_gen;
END_RCPP
}
// gammasim
arma::mat gammasim(int n, arma::mat x, int mu, int ml, int S, int B, double rho);
RcppExport SEXP _SD_gammasim(SEXP nSEXP, SEXP xSEXP, SEXP muSEXP, SEXP mlSEXP, SEXP SSEXP, SEXP BSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type mu(muSEXP);
    Rcpp::traits::input_parameter< int >::type ml(mlSEXP);
    Rcpp::traits::input_parameter< int >::type S(SSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(gammasim(n, x, mu, ml, S, B, rho));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SD_cl", (DL_FUNC) &_SD_cl, 1},
    {"_SD_csample", (DL_FUNC) &_SD_csample, 4},
    {"_SD_fsample", (DL_FUNC) &_SD_fsample, 4},
    {"_SD_mSD", (DL_FUNC) &_SD_mSD, 5},
    {"_SD_Amat", (DL_FUNC) &_SD_Amat, 1},
    {"_SD_gen", (DL_FUNC) &_SD_gen, 2},
    {"_SD_cmb", (DL_FUNC) &_SD_cmb, 1},
    {"_SD_stl_nth_element", (DL_FUNC) &_SD_stl_nth_element, 2},
    {"_SD_gammasim", (DL_FUNC) &_SD_gammasim, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_SD(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
